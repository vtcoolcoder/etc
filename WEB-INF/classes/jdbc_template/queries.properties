extra.amount=amount
extra.suffix=_backup
extra.prefix=source_

fragment.offset=0
fragment.size=230
fragment.pseudo=fragment
    
table.main=java
table.backup=${table.main}${extra.suffix}
      
column.id=id
column.subject=subject
column.note=note
column.timestamp=timestamp
       
backup.id=${extra.prefix}${column.id}
backup.subject=${extra.prefix}${column.subject}
backup.note=${extra.prefix}${column.note}
backup.timestamp=${extra.prefix}${column.timestamp}


query.addNote=\
    INSERT INTO ${table.main} \
        (${column.subject}, \
         ${column.note})\
    VALUES \
        (TRIM(?), \
         TRIM(?))
    
query.backup=\
    INSERT INTO ${table.backup} \
        (${backup.id}, \
        ${backup.subject}, \
        ${backup.note}, \
        ${backup.timestamp})\
    SELECT * \
    FROM ${table.main} \
    WHERE ${column.id} = ?  
    
query.backupByLikeContent=\
    INSERT INTO ${table.backup} \
        (${backup.id}, \
        ${backup.subject}, \
        ${backup.note}, \
        ${backup.timestamp})\
    SELECT * \
    FROM ${table.main} \
    WHERE ${column.note} LIKE ?

             
query.noteFragment=\
    SELECT \
        SUBSTRING(\
            ${column.note}, \
            ${fragment.offset}, \
            ${fragment.size}) \
        AS ${fragment.pseudo} \
    FROM ${table.main} \
    WHERE ${column.id} = ?
    
query.noteById=\
    SELECT ${column.note} \
    FROM ${table.main} \
    WHERE ${column.id} = ?
    
query.distinctSubjects=\
    SELECT DISTINCT ON \
        (LOWER(${column.subject})) ${column.subject} \
    FROM ${table.main}
    
query.specificNote=\
    SELECT \
        ${column.subject}, \
        ${column.note} \
    FROM ${table.main} \
    WHERE ${column.subject} = ? \
    ORDER BY ${column.note}
    
query.fullSpecific=\
    SELECT * \
    FROM ${table.main} \
    WHERE ${column.subject} = ? \
    ORDER BY ${column.note}
    
query.allNotesWithoutId=\
    SELECT \
        ${column.subject}, \
        ${column.note} \
    FROM ${table.main} \
    ORDER BY \
        LOWER(${column.subject}), \
        ${column.note} 
    
query.allNotes=\
    SELECT * \
    FROM ${table.main} \
    ORDER BY \
        LOWER(${column.subject}), \
        ${column.note} 
        
query.notesBySubjects=\
    SELECT * \
    FROM ${table.main} \
    WHERE ${column.subject} %s \
    ORDER BY \
        LOWER(${column.subject}), \
        ${column.note} 
        
query.notesByContent=\
    SELECT * \
    FROM ${table.main} \
    WHERE ${column.note} LIKE ? \
    ORDER BY \
        LOWER(${column.subject}), \
        ${column.note}
        
query.notesBySubjectAmount=\
    SELECT \
        ${column.subject}, \
        COUNT(${column.note}) \
        AS ${extra.amount} \
    FROM ${table.main} \
    GROUP BY ${column.subject} \
    ORDER BY LOWER(${column.subject})
    
query.allSubjectsAmount=\
    SELECT \
        COUNT(DISTINCT ${column.subject}) \
        AS ${extra.amount} \
    FROM ${table.main}    
    
query.allNotesAmount=\
    SELECT \
        COUNT(${column.note}) \
        AS ${extra.amount} \
    FROM ${table.main}
    
query.allId=\
    SELECT DISTINCT ${column.id} \
    FROM ${table.main} \
    ORDER BY ${column.id}
    
query.random=\
    SELECT \
        ${column.subject}, \
        ${column.note} \
    FROM ${table.main} \
    WHERE ${column.id} = ? 
    
  
query.updateNote=\
    UPDATE ${table.main} \
    SET ${column.note} = TRIM(?), \
        ${column.timestamp} = NOW() \
    WHERE ${column.id} = ?
    
query.updateNoteByContent=\
    UPDATE ${table.main} \
    SET ${column.note} = TRIM(?), \
        ${column.timestamp} = NOW() \
    WHERE ${column.note} LIKE ?
    
query.transactionUpdate=\
    BEGIN; \
        ${query.backup}; \
        ${query.updateNote}; \
    COMMIT
    
query.transactionUpdateByContent=\
    BEGIN; \
        ${query.backupByLikeContent}; \
        ${query.updateNoteByContent}; \
    COMMIT
    
query.trimUpdate=\
    UPDATE ${table.main} \
    SET ${column.subject} = TRIM(${column.subject}), \
        ${column.note} = TRIM(${column.note})
    
    
query.deleteNote=\
    DELETE \
    FROM ${table.main} \
    WHERE ${column.id} = ?
    
query.deleteNoteByContent=\
    DELETE \
    FROM ${table.main} \
    WHERE ${column.note} LIKE ?
    
query.transactionDelete=\
    BEGIN; \
        ${query.backup}; \
        ${query.deleteNote}; \
    COMMIT
    
query.transactionDeleteByContent=\
    BEGIN; \
        ${query.backupByLikeContent}; \
        ${query.deleteNoteByContent}; \
    COMMIT
    

query.transactionRollBack=ROLLBACK
