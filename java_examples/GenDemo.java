// Простой обобщённый класс.
// Здесь Т обозначает параметр типа, который будет заменён реальным типом
// при создании объекта типа Gen
class Gen<T> {
    T obj; // объявить объект типа Т
    
    // Передать конструктору ссылку на объект типа Т
    Gen(T o) { obj = o; }
    
    // Возвратить объект obj
    T getObj() { return obj; }
    
    // Показать тип Т
    void showType() {
        System.out.println("Типом Т является " 
                           + obj.getClass()
                                .getName());
    }
}

// Продемонстрировать применение обобщённого класса
public class GenDemo {
    public static void main(String[] args) {
        // Создать ссылку типа Gen для целых чисел
        Gen<Integer> iObj;
        
        // Создать объект типа Gen<Integer> и присвоить ссылку на него переменной iObj.
        // Обратите внимание на применение автоупаковки для инкапсуляции значения 88
        // в объекте типа Integer
        iObj = new Gen<Integer> (88);
        
        // Показать тип данных, хранящихся в переменной iObj
        iObj.showType();
        
        // Получить значение переменной iObj.
        // Обратите внимание на то, что для этого не требуется никакого приведения типов
        int v = iObj.getObj();
        System.out.println("Значение: " + v + '\n');
        
        // Создать объект типа Gen для символьных строк
        Gen<String> strObj = new Gen<String> ("Тест обобщений");
        
        // Показать тип данных, хранящихся в переменной strObj
        strObj.showType();
        
        // Получить значение переменной strObj.
        // И в этом случае приведение типов не требуется
        String str = strObj.getObj();
        System.out.println("Значение: " + str);
    }
}