/* Помимо импорта статических членов классов и интерфейсов,
 * определённых в прикладном программном интерфейсе Java API,
 * импортировать статическим способом можно также статические члены
 * своих собственных классов и интерфейсов.
 *
 * Каким бы удобным ни был статический импорт, очень важно не злоупотреблять им.
 * Не следует забывать, что библиотечные классы Java объединяются в пакеты для того,
 * чтобы избежать конфликтов пространств имён 
 * и непреднамеренного сокрытия прочих имён.
 * Если статический член используется в прикладной программе только один или два раза,
 * то его лучше НЕ импортировать.
 * К тому же некоторые статические имена, как, например, System.out, 
 * настолько привычны и узнаваемы, что их вряд ли стоит вообще импортировать.
 * Статический импорт следует оставить на тот случай,
 * если статические члены применяются многократно, 
 * в частности при выполнении целого ряда математических вычислений.
 * В сущности, этим языковым средством стоит пользоваться,
 * но только не злоупотреблять им.
*/

// Воспользоваться статическим импортом для доступа к встроенным в Java методам:
// sqrt() и pow()
import static java.lang.Math.sqrt;
import static java.lang.Math.pow;

// Вычислить гипотенузу прямоугольного треугольника
public class Hypot {
    public static void main(String[] args) {
        double side1 = 3.0;
        double side2 = 4.0;
        
        // Здесь методы sqrt() и pow() можно вызывать непосредственно,
        // опуская имя их класса
        double hypot = sqrt(pow(side1, 2) + pow(side2, 2));
        
        System.out.println("При заданной длине сторон "
                           + side1 + " и " + side2
                           + " гипотенуза равна " + hypot);
    }
}